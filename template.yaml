AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM Template for spotjobs-server

Parameters:
  # SecurityGroupIds:
  #   Type: CommaDelimitedList
  #   Description: Security Groups Ids
  #   Default: "sg-08ec9679509d6cdef"
  # SubnetIds:
  #   Type: CommaDelimitedList
  #   Description: VPC Subnets Ids
  #   Default: "subnet-02ecf2e888e7ca3fc, subnet-0b67c29829562896f, subnet-05dce214fdc55358d"
  ApiName:
    Type: String
    Description: API title
    Default: SpotJobs-API
  ProfileImagesBucketName:
    Type: String
    Description: Profile images bucket name
    Default: dev-profile-photos-408275994567-us-east-2
  ImagesBucketName:
    Type: String
    Description: Images Bucket name
    Default: spotjob-images-dev

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: nodejs10.x
    Environment:
      Variables:
        StageName: dev
        UserPoolId: us-east-1_ddCrkL0qE
        ClientAppId: 6ac1gpnt4j5p2ocgk77eadh4sg
        IdentityPoolId: us-east-2:a48c1f5c-a2f1-42b3-ae55-e7cf2c5e20ad
        region: us-east-2
        PROFILE_IMAGES_BUCKET_NAME: !Ref ProfileImagesBucketName
        IMAGES_BUCKET: !Ref ImagesBucketName
        #OAuth Google configs
        PROVIDER_GOOGLE_ID: "524873855211-4m45do11tm07s5017osdvado7p0hlkv7.apps.googleusercontent.com"
        PROVIDER_GOOGLE_SECRET: "NAzA0R9IQPbVqU4lkAoV01R2"
        GOOGLE_AUTH_CLIENT_REDIRRECT: "https://dzbbrssnsxdez.cloudfront.net/"
        #OAuth Facebook configs
        PROVIDER_FACEBOOK_ID: "346805129212763"
        PROVIDER_FACEBOOK_SECRET: "7c517c89b204d641ca822e4ae4e63321"
        FACEBOOK_AUTH_CLIENT_REDIRRECT: "https://dzbbrssnsxdez.cloudfront.net/"
        #OAuth LinkedIn configs
        PROVIDER_LINKEDIN_CLIENT_ID: "783fasrlywrxz3"
        PROVIDER_LINKEDIN_CLIENT_SECRET: "KlpQsMKPSf5Q1b9e"
        LINKEDIN_AUTH_CLIENT_REDIRRECT: "https://dzbbrssnsxdez.cloudfront.net/"
        SHOULD_PHONE_BE_VERIFIED_IN_COMPLETE_PROFILE: false
        SEND_NOTIFICATION_ENDPOINT: "http://spotjobs-socket-server-768469600.us-east-2.elb.amazonaws.com/notification"
        # PayPal redirect configs
        PAYPAL_CLIENT_REDIRRECT_SUCCESS: "https://dzbbrssnsxdez.cloudfront.net/"
        PAYPAL_CLIENT_REDIRRECT_FAILURE: "https://dzbbrssnsxdez.cloudfront.net/"

Resources:
  CognitoAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "CognitoAuthorizerFunction"]]
      CodeUri: ./src/Handlers/Authorizers/cognitoAuthorizer
      Handler: index.handler
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer

  SpotJobsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "CloudWatchPolicy"
          PolicyDocument:
            Version: "2012-10-17" # CloudWatch policy
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
        - PolicyName: "KMSPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                  - kms:Decrypt
                Resource: "*"
        - PolicyName: "CognitoPolicy"
          PolicyDocument:
            Version: "2012-10-17" # Cognito policy
            Statement:
              - Effect: Deny
                Action:
                  - cognito-idp:DeleteUserPool
                Resource: "*"
              - Effect: Allow
                Action:
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminDeleteUserAttributes
                  - cognito-idp:AdminDisableUser
                  - cognito-idp:AdminEnableUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminResetUserPassword
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:ChangePassword
                  - cognito-idp:ConfirmSignUp
                  - cognito-idp:DeleteUser
                  - cognito-idp:GetUser
                  - cognito-idp:InitiateAuth
                  - cognito-idp:GlobalSignOut
                  - cognito-idp:ListUsers
                  - cognito-idp:SignUp
                  - cognito-idp:VerifyUserAttribute
                  - sns:ListPlatformApplications
                  - secretsmanager:GetSecretValue
                Resource: "*"
              - Effect: Allow
                Action: iam:CreateServiceLinkedRole
                Resource: "*"
                Condition:
                  StringEquals:
                    iam:AWSServiceName: email.cognito-idp.amazonaws.com
              - Effect: Allow
                Action:
                  - iam:DeleteServiceLinkedRole
                  - iam:GetServiceLinkedRoleDeletionStatus
                Resource: arn:aws:iam::*:role/aws-service-role/email.cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdpEmail*
        - PolicyName: "S3Policy"
          PolicyDocument:
            Version: "2012-10-17" # S3 policy
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  !Join [
                    "",
                    ["arn:aws:s3:::", !Ref ProfileImagesBucketName, "/*"],
                  ]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  !Join ["", ["arn:aws:s3:::", !Ref ImagesBucketName, "/*"]]
        - PolicyName: "DynamoDBPolicy"
          PolicyDocument:
            Version: "2012-10-17" # DynamoDB policy
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:ReturnValues
                  - dynamodb:DescribeTable
                  - dynamodb:CreateTable
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: "arn:aws:dynamodb:*:*:*"
  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${CognitoAuthorizerFunction.Arn}

  ####################################
  ######## API definition ############
  ####################################

  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: "2.0"
        securityDefinitions:
          MyCognitoAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              type: token
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoAuthorizerFunction.Arn}/invocations
              authorizerCredentials:
                Fn::Sub: ${ApiGatewayAuthorizerRole.Arn}
              authorizerResultTtlInSeconds: 0
        info:
          description: "This is SpotJobs API"
          version: "0.0.1"
          title: "SpotJobs API"
        schemes:
          - "https"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        paths:
          /auth/signup:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUpFunc.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /auth/oauth/{any+}:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OAuth.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OAuth.Arn}/invocations
                responses: {}
                # passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /auth/signin:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignInFunc.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /auth/logout:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LogoutFunc.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /auth/update-creds:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateCredsFunc.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /auth/forgot-password:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ForgotPasswordFunc.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /auth/forgot-password/confirm:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmForgotPasswordFunc.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /auth/signup/confirm:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmSignUpFunc.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /auth/signup/confirm-code-resend:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmSignUpResendCodeFunc.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /user:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFullUser.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
            put:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUser.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
          /user/send-attrib-verification-code:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserAttribVerificationCode.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /user/verify-attribute:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VerifyUserAttribute.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /user/update-password:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChangePassword.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /user/delete:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUser.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /services:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetServicesList.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /services/popular:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPopularServicesList.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostJob.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job/{id}:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            put:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateJob.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
            delete:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteJob.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetJobById.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job/ignore:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersIgnoredJobs.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddJobToIgnore.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job/ignore/{jobIgnoreId}:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            delete:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveJobFromIgnore.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /jobs:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetJobsList.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /jobs/booked:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBookedJobs.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /jobs/{jobId}/complete:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MarkJobAsCompleted.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /jobs/{jobId}/cancele:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CanceleJob.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /favourites/job:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddFavouriteJob.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
            delete:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFavouriteJob.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /favourites/job/list:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFavouritesJobsList.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /favourites/service-provider:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddFavouriteSP.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
            delete:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFavouriteSP.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /favourites/service-provider/list:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFavouritesSPsList.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /service-providers:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetServiceProvidersList.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /service-provider/{id}:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetServiceProviderProfile.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /applications/apply:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApplyForJob.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /applications/{applicationId}/accept:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AcceptApplicant.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /applications/{applicationId}/reject:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RejectApplicant.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /applications/hire:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HireApplicant.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /applications:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersAppliedForJobs.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job-request/incoming:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersIncomingJobRequests.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job-request/outgoing:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersOutgoingJobRequests.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job-request:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendJobRequest.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job-request/{jobRequestId}/accept:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AcceptJobRequest.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job-request/{jobRequestId}/reject:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RejectJobRequest.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /job-request/{jobRequestId}:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            delete:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteJobRequest.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /review:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddJobReview.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /review/{id}:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            put:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateJobReview.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
            delete:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteJobReview.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /review/user/{userId}:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersReviews.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /pts/price:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPtsPriceByRegion.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /pts/buy:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthrou ghBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BuyPoints.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /paypal/callback:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthrou ghBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            x-amazon-apigateway-any-method:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PaypalCallback.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /pts/ad-seen:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthrou ghBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdSeen.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /subscription/price:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSubscriptionsCost.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /subscription/buy:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BuySubscription.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /subscription/revert:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RevertSubscription.Arn}/invocations
                responses: {}
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY
          /user-report:
            options:
              tags:
                - "CORS"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: OPTIONS
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            post:
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - MyCognitoAuthorizer: []
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserReport.Arn}/invocations
                responses:
                  "401":
                    statusCode: 401
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: AWS_PROXY

  ####################################
  ########## Cron Functions ##########
  ####################################
  ArchiveJobs:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "Cron", "ArchiveJobs"]]
      CodeUri: ./src/CronJobs/ArchiveJobPosts
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds:
      #     - sg-08ec9679509d6cdef
      #   SubnetIds:
      #     - subnet-02ecf2e888e7ca3fc
      #     - subnet-0b67c29829562896f
      #     - subnet-05dce214fdc55358d
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref HelpersLayer
      Events:
        ArchiveJobsEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 3 * * ? *)

  GetPopularServices:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "Cron", "GetPopularServices"]]
      CodeUri: ./src/CronJobs/GetPopularServices
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds:
      #     - sg-08ec9679509d6cdef
      #   SubnetIds:
      #     - subnet-02ecf2e888e7ca3fc
      #     - subnet-0b67c29829562896f
      #     - subnet-05dce214fdc55358d
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref HelpersLayer
      Events:
        GetPopularServicesEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 3 * * ? *)

  SendAppointmentReminder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        !Join ["-", [!Ref ApiName, "Cron", "SendAppointmentReminder"]]
      CodeUri: ./src/CronJobs/AppointmentReminder
      Handler: index.handler
      Role: arn:aws:iam::408275994567:role/LambaRole
      # VpcConfig:
      #   SecurityGroupIds:
      #     - sg-08ec9679509d6cdef
      #   SubnetIds:
      #     - subnet-02ecf2e888e7ca3fc
      #     - subnet-0b67c29829562896f
      #     - subnet-05dce214fdc55358d
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref HelpersLayer
      Events:
        GetPopularServicesEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0/1 * * * ? *)

  ####################################
  ########## Layers ##################
  ####################################
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: DependenciesLayer
      Description: Dependencies for the app
      ContentUri: shared/
      CompatibleRuntimes:
        - nodejs8.10
        - nodejs10.x
      RetentionPolicy: Retain

  ### Libs
  RequestLibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: RequestLib
      Description: Request Lib layer
      ContentUri: ./src/LibsLayer/RequestLibLayer/request.lib.js
      CompatibleRuntimes:
        - nodejs8.10
        - nodejs10.x
      RetentionPolicy: Retain

  ResponseLibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ResponseLib
      Description: Response Lib layer
      ContentUri: ./src/LibsLayer/ResponseLibLayer/response.lib.js
      CompatibleRuntimes:
        - nodejs8.10
        - nodejs10.x
      RetentionPolicy: Retain

  ### Helpers
  HelpersLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: Helpers
      Description: Helpers layer
      ContentUri: ./src/HelpersLayer/
      CompatibleRuntimes:
        - nodejs8.10
        - nodejs10.x
      RetentionPolicy: Retain

  ### Managers
  ManagersLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ManagersLayer
      Description: App business logic managers
      ContentUri: ./src/ManagersLayer/Managers
      CompatibleRuntimes:
        - nodejs8.10
        - nodejs10.x
      RetentionPolicy: Retain

  ####################################
  ########## Functions ###############
  ####################################

  ###
  #  Auth functions
  ###
  CognitoPreSignUpTrigger:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "CognitoPreSignUpTrigger"]]
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
      CodeUri: ./src/Handlers/Authorization/CognitoPreSignUpTrigger
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}

  OAuth:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "OAuth"]]
      CodeUri: ./src/Handlers/Authorization/OAuth
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref HelpersLayer
      Events:
        OAuth:
          Type: Api
          Properties:
            Path: /auth/oauth/{any+}
            Method: any
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  SignInFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "SignIn"]]
      CodeUri: ./src/Handlers/Authorization/SignIn
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        SingIn:
          Type: Api
          Properties:
            Path: /auth/signin
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  SignUpFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "SignUp"]]
      CodeUri: ./src/Handlers/Authorization/SignUp
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        SingUp:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  LogoutFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "Logout"]]
      CodeUri: ./src/Handlers/Authorization/Logout
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ResponseLibLayer
        - !Ref ManagersLayer
        - !Ref HelpersLayer
      Events:
        Logout:
          Type: Api
          Properties:
            Path: /auth/logout
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer
  UpdateCredsFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "UpdateCreds"]]
      CodeUri: ./src/Handlers/Authorization/UpdateToken
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ResponseLibLayer
        - !Ref ManagersLayer
      Events:
        UpdateCreds:
          Type: Api
          Properties:
            Path: /auth/update-creds
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  ForgotPasswordFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "ForgotPassword"]]
      CodeUri: ./src/Handlers/Authorization/ForgotPassword
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        ForgotPassword:
          Type: Api
          Properties:
            Path: /auth/forgot-password
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  ConfirmForgotPasswordFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "ConfirmForgotPassword"]]
      CodeUri: ./src/Handlers/Authorization/ConfirmForgotPassword
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        ConfirmForgotPassword:
          Type: Api
          Properties:
            Path: /auth/forgot-password/confirm
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  ConfirmSignUpFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "ConfirmSignUp"]]
      CodeUri: ./src/Handlers/Authorization/ConfirmSignUp
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        ConfirmSignUp:
          Type: Api
          Properties:
            Path: /auth/signup/confirm
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  ConfirmSignUpResendCodeFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "ConfirmSignUpResendCode"]]
      CodeUri: ./src/Handlers/Authorization/ConfirmSignUpResendCode
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        ConfirmSignUpResendCode:
          Type: Api
          Properties:
            Path: /auth/signup/confirm-code-resend
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE

  ###
  # User functions
  ###
  GetFullUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetFullUser"]]
      CodeUri: ./src/Handlers/User/getFullUser
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "UpdateUser"]]
      CodeUri: ./src/Handlers/User/updateUser
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        UpdateUserEvent:
          Type: Api
          Properties:
            Path: /user
            Method: put
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  GetUserAttribVerificationCode:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetUserAttribVerificationCode"]]
      CodeUri: ./src/Handlers/User/getUserAttribVerificationCode
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        UpdateUserEvent:
          Type: Api
          Properties:
            Path: /user/send-attrib-verification-code
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  VerifyUserAttribute:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "VerifyUserAttribute"]]
      CodeUri: ./src/Handlers/User/verifyUserAttribute
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        UpdateUserEvent:
          Type: Api
          Properties:
            Path: /user/verify-attribute
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  ChangePassword:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "ChangePassword"]]
      CodeUri: ./src/Handlers/User/changePassword
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        ChangePasswordEvent:
          Type: Api
          Properties:
            Path: /user/update-password
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "DeleteUser"]]
      CodeUri: ./src/Handlers/User/deleteUser
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ManagersLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
      Events:
        DeleteUserEvent:
          Type: Api
          Properties:
            Path: /user/delete
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  ###
  # Services functions
  ###
  GetServicesList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetServicesList"]]
      CodeUri: ./src/Handlers/Services/getServicesList
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ResponseLibLayer
        - !Ref ManagersLayer
      Events:
        GetServices:
          Type: Api
          Properties:
            Path: /services
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE

  GetPopularServicesList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetPopularServicesList"]]
      CodeUri: ./src/Handlers/Services/getPopularCategories
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ResponseLibLayer
        - !Ref ManagersLayer
      Events:
        GetPopularServices:
          Type: Api
          Properties:
            Path: /services/popular
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE

  ###
  # Job functions
  ###
  PostJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "PostJob"]]
      CodeUri: ./src/Handlers/Job/postJob
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        PostJob:
          Type: Api
          Properties:
            Path: /job
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  UpdateJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "UpdateJob"]]
      CodeUri: ./src/Handlers/Job/updateJob
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        PostJob:
          Type: Api
          Properties:
            Path: /job/{id}
            Method: put
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  DeleteJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "DeleteJob"]]
      CodeUri: ./src/Handlers/Job/deleteJob
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        PostJob:
          Type: Api
          Properties:
            Path: /job/{id}
            Method: delete
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  GetJobById:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetJobById"]]
      CodeUri: ./src/Handlers/Job/getJobById
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job/{id}
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE

  GetJobsList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetJobsList"]]
      CodeUri: ./src/Handlers/Job/getJobs
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /jobs
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE

  GetBookedJobs:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetBookedJobs"]]
      CodeUri: ./src/Handlers/Job/getBookedJobs
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /jobs/booked
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  MarkJobAsCompleted:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "MarkJobAsCompleted"]]
      CodeUri: ./src/Handlers/Job/markAsCompleted
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /jobs/{jobId}/complete
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  AddJobToIgnore:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "AddJobToIgnore"]]
      CodeUri: ./src/Handlers/Job/Ignore/Add
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job/ignore
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  RemoveJobFromIgnore:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "RemoveJobFromIgnore"]]
      CodeUri: ./src/Handlers/Job/Ignore/Delete
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job/ignore/{jobIgnoreId}
            Method: delete
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  GetUsersIgnoredJobs:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetUsersIgnoredJobs"]]
      CodeUri: ./src/Handlers/Job/Ignore/Get
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job/ignore
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  CanceleJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "CanceleJob"]]
      CodeUri: ./src/Handlers/Job/canceleJob
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /jobs/{jobId}/cancele
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  ###
  # Favourites functions
  ###
  AddFavouriteJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "AddFavouriteJob"]]
      CodeUri: ./src/Handlers/Favourites/Job/Add
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /favourites/job
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  DeleteFavouriteJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "DeleteFavouriteJob"]]
      CodeUri: ./src/Handlers/Favourites/Job/Delete
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /favourites/job
            Method: delete
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  GetFavouritesJobsList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetFavouritesJobsList"]]
      CodeUri: ./src/Handlers/Favourites/Job/GetList
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /favourites/job/list
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  AddFavouriteSP:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "AddFavouriteSP"]]
      CodeUri: ./src/Handlers/Favourites/ServiceProvider/Add
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /favourites/service-provider
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  DeleteFavouriteSP:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "DeleteFavouriteSP"]]
      CodeUri: ./src/Handlers/Favourites/ServiceProvider/Delete
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /favourites/service-provider
            Method: delete
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  GetFavouritesSPsList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetFavouritesSPsList"]]
      CodeUri: ./src/Handlers/Favourites/ServiceProvider/GetList
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /favourites/service-provider/list
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  ###
  # Service Providers functions
  ###
  GetServiceProvidersList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetServiceProvidersList"]]
      CodeUri: ./src/Handlers/ServiceProvider/getList
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /service-providers
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  GetServiceProviderProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetServiceProviderProfile"]]
      CodeUri: ./src/Handlers/ServiceProvider/getServiceProfileProvider
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /service-provider/{id}
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE

  ###
  # Applying functions
  ###
  ApplyForJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "ApplyForJob"]]
      CodeUri: ./src/Handlers/Application/Apply
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /applications/apply
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  AcceptApplicant:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "AcceptApplicant"]]
      CodeUri: ./src/Handlers/Application/AcceptApplicant
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /applications/{applicationId}/accept
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  RejectApplicant:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "RejectApplicant"]]
      CodeUri: ./src/Handlers/Application/RejectApplicant
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /applications/{applicationId}/reject
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  HireApplicant:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "HireApplicant"]]
      CodeUri: ./src/Handlers/Application/Hire
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /applications/hire
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  GetUsersAppliedForJobs:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetUsersAppliedForJobs"]]
      CodeUri: ./src/Handlers/Application/GetUserAppliedForJobs
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /applications
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  ###
  # Job requests functions
  ###
  GetUsersIncomingJobRequests:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetUsersIncomingJobRequests"]]
      CodeUri: ./src/Handlers/JobRequest/GetUserIncomingRequests
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job-request/incoming
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  GetUsersOutgoingJobRequests:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetUsersOutgoingJobRequests"]]
      CodeUri: ./src/Handlers/JobRequest/GetUserOutGoingRequests
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job-request/outgoing
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  SendJobRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "SendJobRequest"]]
      CodeUri: ./src/Handlers/JobRequest/Send
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job-request
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  AcceptJobRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "AcceptJobRequest"]]
      CodeUri: ./src/Handlers/JobRequest/Accept
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job-request/{jobRequestId}/accept
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  RejectJobRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "RejectJobRequest"]]
      CodeUri: ./src/Handlers/JobRequest/Reject
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job-request/{jobRequestId}/reject
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  DeleteJobRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "DeleteJobRequest"]]
      CodeUri: ./src/Handlers/JobRequest/Delete
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /job-request/{jobRequestId}
            Method: delete
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  ###
  # Job Reviews functions
  ###
  AddJobReview:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "AddJobReview"]]
      CodeUri: ./src/Handlers/JobReview/AddReview
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /review
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  UpdateJobReview:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "UpdateJobReview"]]
      CodeUri: ./src/Handlers/JobReview/UpdateReview
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /review/{id}
            Method: put
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  DeleteJobReview:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "DeleteJobReview"]]
      CodeUri: ./src/Handlers/JobReview/DeleteReview
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /review/{id}
            Method: delete
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  GetUsersReviews:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetUsersReviews"]]
      CodeUri: ./src/Handlers/JobReview/GetUsersReviews
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ResponseLibLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /review/user/{userId}
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE

  GetPtsPriceByRegion:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetPtsPriceByRegion"]]
      CodeUri: ./src/Handlers/Points/GetPtsPrice
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ResponseLibLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /pts/price
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  BuyPoints:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "BuyPoints"]]
      CodeUri: ./src/Handlers/Points/Buy
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /pts/buy
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer
  PaypalCallback:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "PaypalCallback"]]
      CodeUri: ./src/Handlers/Points/PaypalCallback
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /paypal/callback
            Method: ANY
            RestApiId: !Ref UserApi
  AdSeen:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "AdSeen"]]
      CodeUri: ./src/Handlers/Points/AdSeen
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /pts/ad-seen
            Method: post
            RestApiId: !Ref UserApi

  GetSubscriptionsCost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "GetSubscriptionsCost"]]
      CodeUri: ./src/Handlers/Subscriptions/GetSubscriptionsPrice
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref ResponseLibLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /subscription/price
            Method: get
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: NONE
  BuySubscription:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "BuySubscription"]]
      CodeUri: ./src/Handlers/Subscriptions/Subscribe
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /subscription/buy
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer
  RevertSubscription:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "RevertSubscription"]]
      CodeUri: ./src/Handlers/Subscriptions/RevertSubscription
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /subscription/revert
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

  CreateUserReport:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ApiName, "CreateUserReport"]]
      CodeUri: ./src/Handlers/UserReport/Create
      Handler: index.handler
      Role:
        Fn::Sub: ${SpotJobsLambdaRole.Arn}
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      KmsKeyArn: arn:aws:kms:us-east-2:408275994567:key/8b32a2a5-79f0-4866-aaa8-4b0d2982bedc
      Layers:
        - !Ref DependenciesLayer
        - !Ref RequestLibLayer
        - !Ref ResponseLibLayer
        - !Ref HelpersLayer
        - !Ref ManagersLayer
      Events:
        GetJob:
          Type: Api
          Properties:
            Path: /user-report
            Method: post
            RestApiId: !Ref UserApi
            Auth:
              Authorizer: MyCognitoAuthorizer

Outputs:
  ProdDataEndpoint:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
